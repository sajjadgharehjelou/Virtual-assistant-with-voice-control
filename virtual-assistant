import tkinter as tk
from tkinter import messagebox, filedialog
import speech_recognition as sr
import pyttsx3
import os
import threading
from pydub import AudioSegment
from docx import Document  # برای ذخیره به صورت فایل Word

# تنظیمات Pyttsx3 برای تولید صدا
engine = pyttsx3.init()
engine.setProperty('rate', 150)  # تنظیم سرعت خواندن

# متغیرهای جهانی
output_file_path = os.path.join(os.path.expanduser("~"), "Documents", "converted_text.docx")  # ذخیره فایل در Documents
email_address = "your_email@gmail.com"
email_password = "your_password"

# تابع برای تبدیل متن به صدا
def speak(text):
    engine.say(text)
    engine.runAndWait()

# تابع برای تبدیل فایل صوتی mp3 به wav
def convert_audio_to_wav(audio_path):
    try:
        audio = AudioSegment.from_file(audio_path)
        wav_path = os.path.splitext(audio_path)[0] + ".wav"
        audio.export(wav_path, format="wav")
        return wav_path
    except Exception as e:
        messagebox.showerror("Error", f"Failed to convert audio file. Error: {e}")
        return None

# تابع برای پردازش فایل صوتی و تبدیل آن به متن
def convert_audio_to_text(audio_path):
    recognizer = sr.Recognizer()

    # تبدیل فایل mp3 به wav اگر فایل mp3 باشد
    if audio_path.endswith(".mp3"):
        audio_path = convert_audio_to_wav(audio_path)
        if not audio_path:  # اگر تبدیل موفقیت‌آمیز نبود
            return

    try:
        with sr.AudioFile(audio_path) as source:
            audio_data = recognizer.record(source)
            speak("Processing audio file, please wait...")

        # تلاش برای تبدیل صوت به متن
        try:
            text = recognizer.recognize_google(audio_data)
            
            # ایجاد و ذخیره فایل Word با استفاده از python-docx
            doc = Document()
            doc.add_paragraph(text)  # اضافه کردن متن به فایل ورد
            doc.save(output_file_path)  # ذخیره کردن فایل ورد
            
            speak(f"Audio converted to text and saved in {output_file_path}.")
            messagebox.showinfo("Success", f"Audio converted to text and saved in {output_file_path}.")
        except sr.UnknownValueError:
            speak("Sorry, I couldn't understand the audio.")
            messagebox.showerror("Error", "Sorry, I couldn't understand the audio.")
        except sr.RequestError:
            speak("Sorry, my speech service is down.")
            messagebox.showerror("Error", "Speech service is unavailable.")

    except Exception as e:
        speak(f"Error loading audio file: {e}")
        messagebox.showerror("Error", f"Could not process the audio file. Error: {e}")

# تابع برای بارگذاری فایل صوتی
def upload_audio():
    audio_path = filedialog.askopenfilename(title="Select an Audio File", filetypes=[("Audio Files", "*.wav *.mp3 *.flac")])
    if audio_path:
        speak("Audio file uploaded successfully.")
        messagebox.showinfo("Info", "Audio file uploaded successfully.")
        
        # پردازش در یک رشته جداگانه برای جلوگیری از قفل شدن رابط کاربری
        processing_thread = threading.Thread(target=convert_audio_to_text, args=(audio_path,))
        processing_thread.start()
    else:
        speak("No audio file selected.")
        messagebox.showwarning("Warning", "No audio file selected.")

# تابع برای تغییر آدرس ایمیل و رمز عبور
def change_email_credentials():
    global email_address, email_password
    new_email = email_entry.get()
    new_password = password_entry.get()
    if new_email and new_password:
        email_address = new_email
        email_password = new_password
        messagebox.showinfo("Success", "Email address and password updated successfully.")
    else:
        messagebox.showwarning("Input Error", "Please enter both email and password.")

# تابع برای تغییر محل ذخیره فایل ورد
def change_output_file_path():
    global output_file_path
    new_path = filedialog.askdirectory(title="Select Output Directory")
    if new_path:
        output_file_path = os.path.join(new_path, "converted_text.docx")
        messagebox.showinfo("Success", f"Output file path updated to: {output_file_path}")

# تابع برای شروع دستیار صوتی
def start_voice_assistant():
    speak("Voice assistant started.")
    while True:
        command = listen()
        if 'exit' in command or 'stop' in command:
            speak("Goodbye!")
            break
        process_command(command)

# تابع برای پردازش ورودی صوتی
def process_command(command):
    if 'record audio' in command:
        record_audio()
    elif 'upload audio' in command:
        upload_audio()
    elif 'change email' in command:
        change_email_credentials()
    elif 'change output path' in command:
        change_output_file_path()
    else:
        speak("I don't understand that command.")

# تابع برای ضبط صدا
def record_audio():
    speak("Please speak your message.")
    text = listen()
    if text:
        # ذخیره کردن متن ضبط شده به عنوان فایل ورد
        doc = Document()
        doc.add_paragraph(text)
        doc.save(output_file_path)
        
        speak(f"Your voice message has been converted to text and saved in {output_file_path}.")
        messagebox.showinfo("Success", f"Your voice message has been converted to text and saved in {output_file_path}.")

# تابع برای شنیدن صدا
def listen():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening...")
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source)

        try:
            text = recognizer.recognize_google(audio)
            print(f"You said: {text}")
            return text.lower()
        except sr.UnknownValueError:
            speak("Sorry, I didn't understand that.")
        except sr.RequestError:
            speak("Sorry, my speech service is down.")
        return ""

# ساختن محیط گرافیکی
def create_gui():
    global email_entry, password_entry
    root = tk.Tk()
    root.title("Audio to Text Converter")
    root.geometry("800x600")  # تنظیم اندازه پنجره

    # Frame بالای صفحه برای گزینه‌ها
    top_frame = tk.Frame(root)
    top_frame.pack(side=tk.TOP, fill=tk.X)

    # دکمه‌های گزینه‌ها
    tk.Button(top_frame, text="Upload Audio", command=upload_audio).pack(side=tk.LEFT, padx=10, pady=10)
    tk.Button(top_frame, text="Change Email & Password", command=change_email_credentials).pack(side=tk.LEFT, padx=10, pady=10)
    tk.Button(top_frame, text="Change Output Path", command=change_output_file_path).pack(side=tk.LEFT, padx=10, pady=10)
    tk.Button(top_frame, text="Start Voice Assistant", command=start_assistant_thread).pack(side=tk.LEFT, padx=10, pady=10)
    tk.Button(top_frame, text="Exit", command=root.quit).pack(side=tk.LEFT, padx=10, pady=10)

    # فرم ورود ایمیل و رمز عبور
    credentials_frame = tk.Frame(root)
    credentials_frame.pack(pady=10)

    tk.Label(credentials_frame, text="Email Address:").grid(row=0, column=0, padx=5, pady=5)
    email_entry = tk.Entry(credentials_frame)
    email_entry.grid(row=0, column=1, padx=5, pady=5)

    tk.Label(credentials_frame, text="Password:").grid(row=1, column=0, padx=5, pady=5)
    password_entry = tk.Entry(credentials_frame, show='*')
    password_entry.grid(row=1, column=1, padx=5, pady=5)

    root.mainloop()

# تابع برای شروع دستیار صوتی در یک رشته جداگانه
def start_assistant_thread():
    assistant_thread = threading.Thread(target=start_voice_assistant)
    assistant_thread.daemon = True
    assistant_thread.start()

if __name__ == "__main__":
    create_gui()
